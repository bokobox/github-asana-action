/** Declaration file generated by dts-gen */

declare module "asana" {
export class AllocationsApi {
    constructor(apiClient: any);

    createAllocation(body: any, opts: any): any;

    createAllocationWithHttpInfo(body: any, opts: any): any;

    deleteAllocation(allocation_gid: any): any;

    deleteAllocationWithHttpInfo(allocation_gid: any): any;

    getAllocation(allocation_gid: any, opts: any): any;

    getAllocationWithHttpInfo(allocation_gid: any, opts: any): any;

    getAllocations(opts: any): any;

    getAllocationsWithHttpInfo(opts: any): any;

    updateAllocation(body: any, allocation_gid: any, opts: any): any;

    updateAllocationWithHttpInfo(body: any, allocation_gid: any, opts: any): any;

}

export class ApiClient {
    constructor();

    applyAuthToRequest(request: any, authNames: any): void;

    buildCollectionParam(param: any, collectionFormat: any): any;

    buildUrl(path: any, pathParams: any): any;

    callApi(path: any, httpMethod: any, pathParams: any, queryParams: any, headerParams: any, formParams: any, bodyParam: any, authNames: any, contentTypes: any, accepts: any, returnType: any): any;

    deserialize(response: any, returnType: any): any;

    isFileParam(param: any): any;

    isJsonMime(contentType: any): any;

    jsonPreferredMime(contentTypes: any): any;

    normalizeParams(params: any): any;

    paramToString(param: any): any;

    static CollectionFormatEnum: {
        CSV: string;
        MULTI: string;
        PIPES: string;
        SSV: string;
        TSV: string;
    };

    static constructFromObject(data: any, obj: any, itemType: any): void;

    static convertToType(data: any, type: any): any;

    static parseDate(str: any): any;

}

export class AttachmentsApi {
    constructor(apiClient: any);

    createAttachmentForObject(opts: any): any;

    createAttachmentForObjectWithHttpInfo(opts: any): any;

    deleteAttachment(attachment_gid: any): any;

    deleteAttachmentWithHttpInfo(attachment_gid: any): any;

    getAttachment(attachment_gid: any, opts: any): any;

    getAttachmentWithHttpInfo(attachment_gid: any, opts: any): any;

    getAttachmentsForObject(parent: any, opts: any): any;

    getAttachmentsForObjectWithHttpInfo(parent: any, opts: any): any;

}

export class AuditLogAPIApi {
    constructor(apiClient: any);

    getAuditLogEvents(workspace_gid: any, opts: any): any;

    getAuditLogEventsWithHttpInfo(workspace_gid: any, opts: any): any;

}

export class BatchAPIApi {
    constructor(apiClient: any);

    createBatchRequest(body: any, opts: any): any;

    createBatchRequestWithHttpInfo(body: any, opts: any): any;

}

export class CustomFieldSettingsApi {
    constructor(apiClient: any);

    getCustomFieldSettingsForPortfolio(portfolio_gid: any, opts: any): any;

    getCustomFieldSettingsForPortfolioWithHttpInfo(portfolio_gid: any, opts: any): any;

    getCustomFieldSettingsForProject(project_gid: any, opts: any): any;

    getCustomFieldSettingsForProjectWithHttpInfo(project_gid: any, opts: any): any;

}

export class CustomFieldsApi {
    constructor(apiClient: any);

    createCustomField(body: any, opts: any): any;

    createCustomFieldWithHttpInfo(body: any, opts: any): any;

    createEnumOptionForCustomField(custom_field_gid: any, opts: any): any;

    createEnumOptionForCustomFieldWithHttpInfo(custom_field_gid: any, opts: any): any;

    deleteCustomField(custom_field_gid: any): any;

    deleteCustomFieldWithHttpInfo(custom_field_gid: any): any;

    getCustomField(custom_field_gid: any, opts: any): any;

    getCustomFieldWithHttpInfo(custom_field_gid: any, opts: any): any;

    getCustomFieldsForWorkspace(workspace_gid: any, opts: any): any;

    getCustomFieldsForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    insertEnumOptionForCustomField(custom_field_gid: any, opts: any): any;

    insertEnumOptionForCustomFieldWithHttpInfo(custom_field_gid: any, opts: any): any;

    updateCustomField(custom_field_gid: any, opts: any): any;

    updateCustomFieldWithHttpInfo(custom_field_gid: any, opts: any): any;

    updateEnumOption(enum_option_gid: any, opts: any): any;

    updateEnumOptionWithHttpInfo(enum_option_gid: any, opts: any): any;

}

export class EventsApi {
    constructor(apiClient: any);

    getEvents(resource: any, opts: any): any;

    getEventsWithHttpInfo(resource: any, opts: any): any;

}

export class GoalRelationshipsApi {
    constructor(apiClient: any);

    addSupportingRelationship(body: any, goal_gid: any, opts: any): any;

    addSupportingRelationshipWithHttpInfo(body: any, goal_gid: any, opts: any): any;

    getGoalRelationship(goal_relationship_gid: any, opts: any): any;

    getGoalRelationshipWithHttpInfo(goal_relationship_gid: any, opts: any): any;

    getGoalRelationships(supported_goal: any, opts: any): any;

    getGoalRelationshipsWithHttpInfo(supported_goal: any, opts: any): any;

    removeSupportingRelationship(body: any, goal_gid: any): any;

    removeSupportingRelationshipWithHttpInfo(body: any, goal_gid: any): any;

    updateGoalRelationship(body: any, goal_relationship_gid: any, opts: any): any;

    updateGoalRelationshipWithHttpInfo(body: any, goal_relationship_gid: any, opts: any): any;

}

export class GoalsApi {
    constructor(apiClient: any);

    addFollowers(body: any, goal_gid: any, opts: any): any;

    addFollowersWithHttpInfo(body: any, goal_gid: any, opts: any): any;

    createGoal(body: any, opts: any): any;

    createGoalMetric(body: any, goal_gid: any, opts: any): any;

    createGoalMetricWithHttpInfo(body: any, goal_gid: any, opts: any): any;

    createGoalWithHttpInfo(body: any, opts: any): any;

    deleteGoal(goal_gid: any): any;

    deleteGoalWithHttpInfo(goal_gid: any): any;

    getGoal(goal_gid: any, opts: any): any;

    getGoalWithHttpInfo(goal_gid: any, opts: any): any;

    getGoals(opts: any): any;

    getGoalsWithHttpInfo(opts: any): any;

    getParentGoalsForGoal(goal_gid: any, opts: any): any;

    getParentGoalsForGoalWithHttpInfo(goal_gid: any, opts: any): any;

    removeFollowers(body: any, goal_gid: any, opts: any): any;

    removeFollowersWithHttpInfo(body: any, goal_gid: any, opts: any): any;

    updateGoal(body: any, goal_gid: any, opts: any): any;

    updateGoalMetric(body: any, goal_gid: any, opts: any): any;

    updateGoalMetricWithHttpInfo(body: any, goal_gid: any, opts: any): any;

    updateGoalWithHttpInfo(body: any, goal_gid: any, opts: any): any;

}

export class JobsApi {
    constructor(apiClient: any);

    getJob(job_gid: any, opts: any): any;

    getJobWithHttpInfo(job_gid: any, opts: any): any;

}

export class MembershipsApi {
    constructor(apiClient: any);

    createMembership(opts: any): any;

    createMembershipWithHttpInfo(opts: any): any;

    deleteMembership(membership_gid: any): any;

    deleteMembershipWithHttpInfo(membership_gid: any): any;

    getMembership(membership_gid: any, opts: any): any;

    getMembershipWithHttpInfo(membership_gid: any, opts: any): any;

    getMemberships(opts: any): any;

    getMembershipsWithHttpInfo(opts: any): any;

    updateMembership(body: any, membership_gid: any): any;

    updateMembershipWithHttpInfo(body: any, membership_gid: any): any;

}

export class OrganizationExportsApi {
    constructor(apiClient: any);

    createOrganizationExport(body: any, opts: any): any;

    createOrganizationExportWithHttpInfo(body: any, opts: any): any;

    getOrganizationExport(organization_export_gid: any, opts: any): any;

    getOrganizationExportWithHttpInfo(organization_export_gid: any, opts: any): any;

}

export class PortfolioMembershipsApi {
    constructor(apiClient: any);

    getPortfolioMembership(portfolio_membership_gid: any, opts: any): any;

    getPortfolioMembershipWithHttpInfo(portfolio_membership_gid: any, opts: any): any;

    getPortfolioMemberships(opts: any): any;

    getPortfolioMembershipsForPortfolio(portfolio_gid: any, opts: any): any;

    getPortfolioMembershipsForPortfolioWithHttpInfo(portfolio_gid: any, opts: any): any;

    getPortfolioMembershipsWithHttpInfo(opts: any): any;

}

export class PortfoliosApi {
    constructor(apiClient: any);

    addCustomFieldSettingForPortfolio(body: any, portfolio_gid: any): any;

    addCustomFieldSettingForPortfolioWithHttpInfo(body: any, portfolio_gid: any): any;

    addItemForPortfolio(body: any, portfolio_gid: any): any;

    addItemForPortfolioWithHttpInfo(body: any, portfolio_gid: any): any;

    addMembersForPortfolio(body: any, portfolio_gid: any, opts: any): any;

    addMembersForPortfolioWithHttpInfo(body: any, portfolio_gid: any, opts: any): any;

    createPortfolio(body: any, opts: any): any;

    createPortfolioWithHttpInfo(body: any, opts: any): any;

    deletePortfolio(portfolio_gid: any): any;

    deletePortfolioWithHttpInfo(portfolio_gid: any): any;

    getItemsForPortfolio(portfolio_gid: any, opts: any): any;

    getItemsForPortfolioWithHttpInfo(portfolio_gid: any, opts: any): any;

    getPortfolio(portfolio_gid: any, opts: any): any;

    getPortfolioWithHttpInfo(portfolio_gid: any, opts: any): any;

    getPortfolios(workspace: any, opts: any): any;

    getPortfoliosWithHttpInfo(workspace: any, opts: any): any;

    removeCustomFieldSettingForPortfolio(body: any, portfolio_gid: any): any;

    removeCustomFieldSettingForPortfolioWithHttpInfo(body: any, portfolio_gid: any): any;

    removeItemForPortfolio(body: any, portfolio_gid: any): any;

    removeItemForPortfolioWithHttpInfo(body: any, portfolio_gid: any): any;

    removeMembersForPortfolio(body: any, portfolio_gid: any, opts: any): any;

    removeMembersForPortfolioWithHttpInfo(body: any, portfolio_gid: any, opts: any): any;

    updatePortfolio(body: any, portfolio_gid: any, opts: any): any;

    updatePortfolioWithHttpInfo(body: any, portfolio_gid: any, opts: any): any;

}

export class ProjectBriefsApi {
    constructor(apiClient: any);

    createProjectBrief(body: any, project_gid: any, opts: any): any;

    createProjectBriefWithHttpInfo(body: any, project_gid: any, opts: any): any;

    deleteProjectBrief(project_brief_gid: any): any;

    deleteProjectBriefWithHttpInfo(project_brief_gid: any): any;

    getProjectBrief(project_brief_gid: any, opts: any): any;

    getProjectBriefWithHttpInfo(project_brief_gid: any, opts: any): any;

    updateProjectBrief(body: any, project_brief_gid: any, opts: any): any;

    updateProjectBriefWithHttpInfo(body: any, project_brief_gid: any, opts: any): any;

}

export class ProjectMembershipsApi {
    constructor(apiClient: any);

    getProjectMembership(project_membership_gid: any, opts: any): any;

    getProjectMembershipWithHttpInfo(project_membership_gid: any, opts: any): any;

    getProjectMembershipsForProject(project_gid: any, opts: any): any;

    getProjectMembershipsForProjectWithHttpInfo(project_gid: any, opts: any): any;

}

export class ProjectStatusesApi {
    constructor(apiClient: any);

    createProjectStatusForProject(body: any, project_gid: any, opts: any): any;

    createProjectStatusForProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

    deleteProjectStatus(project_status_gid: any): any;

    deleteProjectStatusWithHttpInfo(project_status_gid: any): any;

    getProjectStatus(project_status_gid: any, opts: any): any;

    getProjectStatusWithHttpInfo(project_status_gid: any, opts: any): any;

    getProjectStatusesForProject(project_gid: any, opts: any): any;

    getProjectStatusesForProjectWithHttpInfo(project_gid: any, opts: any): any;

}

export class ProjectTemplatesApi {
    constructor(apiClient: any);

    deleteProjectTemplate(project_template_gid: any): any;

    deleteProjectTemplateWithHttpInfo(project_template_gid: any): any;

    getProjectTemplate(project_template_gid: any, opts: any): any;

    getProjectTemplateWithHttpInfo(project_template_gid: any, opts: any): any;

    getProjectTemplates(opts: any): any;

    getProjectTemplatesForTeam(team_gid: any, opts: any): any;

    getProjectTemplatesForTeamWithHttpInfo(team_gid: any, opts: any): any;

    getProjectTemplatesWithHttpInfo(opts: any): any;

    instantiateProject(project_template_gid: any, opts: any): any;

    instantiateProjectWithHttpInfo(project_template_gid: any, opts: any): any;

}

export class ProjectsApi {
    constructor(apiClient: any);

    addCustomFieldSettingForProject(body: any, project_gid: any, opts: any): any;

    addCustomFieldSettingForProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

    addFollowersForProject(body: any, project_gid: any, opts: any): any;

    addFollowersForProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

    addMembersForProject(body: any, project_gid: any, opts: any): any;

    addMembersForProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

    createProject(body: any, opts: any): any;

    createProjectForTeam(body: any, team_gid: any, opts: any): any;

    createProjectForTeamWithHttpInfo(body: any, team_gid: any, opts: any): any;

    createProjectForWorkspace(body: any, workspace_gid: any, opts: any): any;

    createProjectForWorkspaceWithHttpInfo(body: any, workspace_gid: any, opts: any): any;

    createProjectWithHttpInfo(body: any, opts: any): any;

    deleteProject(project_gid: any): any;

    deleteProjectWithHttpInfo(project_gid: any): any;

    duplicateProject(project_gid: any, opts: any): any;

    duplicateProjectWithHttpInfo(project_gid: any, opts: any): any;

    getProject(project_gid: any, opts: any): any;

    getProjectWithHttpInfo(project_gid: any, opts: any): any;

    getProjects(opts: any): any;

    getProjectsForTask(task_gid: any, opts: any): any;

    getProjectsForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getProjectsForTeam(team_gid: any, opts: any): any;

    getProjectsForTeamWithHttpInfo(team_gid: any, opts: any): any;

    getProjectsForWorkspace(workspace_gid: any, opts: any): any;

    getProjectsForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    getProjectsWithHttpInfo(opts: any): any;

    getTaskCountsForProject(project_gid: any, opts: any): any;

    getTaskCountsForProjectWithHttpInfo(project_gid: any, opts: any): any;

    projectSaveAsTemplate(body: any, project_gid: any, opts: any): any;

    projectSaveAsTemplateWithHttpInfo(body: any, project_gid: any, opts: any): any;

    removeCustomFieldSettingForProject(body: any, project_gid: any): any;

    removeCustomFieldSettingForProjectWithHttpInfo(body: any, project_gid: any): any;

    removeFollowersForProject(body: any, project_gid: any, opts: any): any;

    removeFollowersForProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

    removeMembersForProject(body: any, project_gid: any, opts: any): any;

    removeMembersForProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

    updateProject(body: any, project_gid: any, opts: any): any;

    updateProjectWithHttpInfo(body: any, project_gid: any, opts: any): any;

}

export class RulesApi {
    constructor(apiClient: any);

    triggerRule(body: any, rule_trigger_gid: any): any;

    triggerRuleWithHttpInfo(body: any, rule_trigger_gid: any): any;

}

export class SectionsApi {
    constructor(apiClient: any);

    addTaskForSection(section_gid: any, opts: any): any;

    addTaskForSectionWithHttpInfo(section_gid: any, opts: any): any;

    createSectionForProject(project_gid: any, opts: any): any;

    createSectionForProjectWithHttpInfo(project_gid: any, opts: any): any;

    deleteSection(section_gid: any): any;

    deleteSectionWithHttpInfo(section_gid: any): any;

    getSection(section_gid: any, opts: any): any;

    getSectionWithHttpInfo(section_gid: any, opts: any): any;

    getSectionsForProject(project_gid: any, opts: any): any;

    getSectionsForProjectWithHttpInfo(project_gid: any, opts: any): any;

    insertSectionForProject(project_gid: any, opts: any): any;

    insertSectionForProjectWithHttpInfo(project_gid: any, opts: any): any;

    updateSection(section_gid: any, opts: any): any;

    updateSectionWithHttpInfo(section_gid: any, opts: any): any;

}

export class StatusUpdatesApi {
    constructor(apiClient: any);

    createStatusForObject(body: any, opts: any): any;

    createStatusForObjectWithHttpInfo(body: any, opts: any): any;

    deleteStatus(status_update_gid: any): any;

    deleteStatusWithHttpInfo(status_update_gid: any): any;

    getStatus(status_update_gid: any, opts: any): any;

    getStatusWithHttpInfo(status_update_gid: any, opts: any): any;

    getStatusesForObject(parent: any, opts: any): any;

    getStatusesForObjectWithHttpInfo(parent: any, opts: any): any;

}

export class StoriesApi {
    constructor(apiClient: any);

    createStoryForTask(body: any, task_gid: any, opts: any): any;

    createStoryForTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

    deleteStory(story_gid: any): any;

    deleteStoryWithHttpInfo(story_gid: any): any;

    getStoriesForTask(task_gid: any, opts: any): any;

    getStoriesForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getStory(story_gid: any, opts: any): any;

    getStoryWithHttpInfo(story_gid: any, opts: any): any;

    updateStory(body: any, story_gid: any, opts: any): any;

    updateStoryWithHttpInfo(body: any, story_gid: any, opts: any): any;

}

export class TagsApi {
    constructor(apiClient: any);

    createTag(body: any, opts: any): any;

    createTagForWorkspace(body: any, workspace_gid: any, opts: any): any;

    createTagForWorkspaceWithHttpInfo(body: any, workspace_gid: any, opts: any): any;

    createTagWithHttpInfo(body: any, opts: any): any;

    deleteTag(tag_gid: any): any;

    deleteTagWithHttpInfo(tag_gid: any): any;

    getTag(tag_gid: any, opts: any): any;

    getTagWithHttpInfo(tag_gid: any, opts: any): any;

    getTags(opts: any): any;

    getTagsForTask(task_gid: any, opts: any): any;

    getTagsForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getTagsForWorkspace(workspace_gid: any, opts: any): any;

    getTagsForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    getTagsWithHttpInfo(opts: any): any;

    updateTag(tag_gid: any, opts: any): any;

    updateTagWithHttpInfo(tag_gid: any, opts: any): any;

}

export class TaskTemplatesApi {
    constructor(apiClient: any);

    deleteTaskTemplate(task_template_gid: any): any;

    deleteTaskTemplateWithHttpInfo(task_template_gid: any): any;

    getTaskTemplate(task_template_gid: any, opts: any): any;

    getTaskTemplateWithHttpInfo(task_template_gid: any, opts: any): any;

    getTaskTemplates(opts: any): any;

    getTaskTemplatesWithHttpInfo(opts: any): any;

    instantiateTask(task_template_gid: any, opts: any): any;

    instantiateTaskWithHttpInfo(task_template_gid: any, opts: any): any;

}

export class TasksApi {
    constructor(apiClient: any);

    addDependenciesForTask(body: any, task_gid: any): any;

    addDependenciesForTaskWithHttpInfo(body: any, task_gid: any): any;

    addDependentsForTask(body: any, task_gid: any): any;

    addDependentsForTaskWithHttpInfo(body: any, task_gid: any): any;

    addFollowersForTask(body: any, task_gid: any, opts: any): any;

    addFollowersForTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

    addProjectForTask(body: any, task_gid: any): any;

    addProjectForTaskWithHttpInfo(body: any, task_gid: any): any;

    addTagForTask(body: any, task_gid: any): any;

    addTagForTaskWithHttpInfo(body: any, task_gid: any): any;

    createSubtaskForTask(body: any, task_gid: any, opts: any): any;

    createSubtaskForTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

    createTask(body: any, opts: any): any;

    createTaskWithHttpInfo(body: any, opts: any): any;

    deleteTask(task_gid: any): any;

    deleteTaskWithHttpInfo(task_gid: any): any;

    duplicateTask(body: any, task_gid: any, opts: any): any;

    duplicateTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

    getDependenciesForTask(task_gid: any, opts: any): any;

    getDependenciesForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getDependentsForTask(task_gid: any, opts: any): any;

    getDependentsForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getSubtasksForTask(task_gid: any, opts: any): any;

    getSubtasksForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getTask(task_gid: any, opts: any): any;

    getTaskForCustomID(workspace_gid: any, custom_id: any): any;

    getTaskForCustomIDWithHttpInfo(workspace_gid: any, custom_id: any): any;

    getTaskWithHttpInfo(task_gid: any, opts: any): any;

    getTasks(opts: any): any;

    getTasksForProject(project_gid: any, opts: any): any;

    getTasksForProjectWithHttpInfo(project_gid: any, opts: any): any;

    getTasksForSection(section_gid: any, opts: any): any;

    getTasksForSectionWithHttpInfo(section_gid: any, opts: any): any;

    getTasksForTag(tag_gid: any, opts: any): any;

    getTasksForTagWithHttpInfo(tag_gid: any, opts: any): any;

    getTasksForUserTaskList(user_task_list_gid: any, opts: any): any;

    getTasksForUserTaskListWithHttpInfo(user_task_list_gid: any, opts: any): any;

    getTasksWithHttpInfo(opts: any): any;

    removeDependenciesForTask(body: any, task_gid: any): any;

    removeDependenciesForTaskWithHttpInfo(body: any, task_gid: any): any;

    removeDependentsForTask(body: any, task_gid: any): any;

    removeDependentsForTaskWithHttpInfo(body: any, task_gid: any): any;

    removeFollowerForTask(body: any, task_gid: any, opts: any): any;

    removeFollowerForTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

    removeProjectForTask(body: any, task_gid: any): any;

    removeProjectForTaskWithHttpInfo(body: any, task_gid: any): any;

    removeTagForTask(body: any, task_gid: any): any;

    removeTagForTaskWithHttpInfo(body: any, task_gid: any): any;

    searchTasksForWorkspace(workspace_gid: any, opts: any): any;

    searchTasksForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    setParentForTask(body: any, task_gid: any, opts: any): any;

    setParentForTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

    updateTask(body: any, task_gid: any, opts: any): any;

    updateTaskWithHttpInfo(body: any, task_gid: any, opts: any): any;

}

export class TeamMembershipsApi {
    constructor(apiClient: any);

    getTeamMembership(team_membership_gid: any, opts: any): any;

    getTeamMembershipWithHttpInfo(team_membership_gid: any, opts: any): any;

    getTeamMemberships(opts: any): any;

    getTeamMembershipsForTeam(team_gid: any, opts: any): any;

    getTeamMembershipsForTeamWithHttpInfo(team_gid: any, opts: any): any;

    getTeamMembershipsForUser(user_gid: any, workspace: any, opts: any): any;

    getTeamMembershipsForUserWithHttpInfo(user_gid: any, workspace: any, opts: any): any;

    getTeamMembershipsWithHttpInfo(opts: any): any;

}

export class TeamsApi {
    constructor(apiClient: any);

    addUserForTeam(body: any, team_gid: any, opts: any): any;

    addUserForTeamWithHttpInfo(body: any, team_gid: any, opts: any): any;

    createTeam(body: any, opts: any): any;

    createTeamWithHttpInfo(body: any, opts: any): any;

    getTeam(team_gid: any, opts: any): any;

    getTeamWithHttpInfo(team_gid: any, opts: any): any;

    getTeamsForUser(user_gid: any, organization: any, opts: any): any;

    getTeamsForUserWithHttpInfo(user_gid: any, organization: any, opts: any): any;

    getTeamsForWorkspace(workspace_gid: any, opts: any): any;

    getTeamsForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    removeUserForTeam(body: any, team_gid: any): any;

    removeUserForTeamWithHttpInfo(body: any, team_gid: any): any;

    updateTeam(body: any, team_gid: any, opts: any): any;

    updateTeamWithHttpInfo(body: any, team_gid: any, opts: any): any;

}

export class TimePeriodsApi {
    constructor(apiClient: any);

    getTimePeriod(time_period_gid: any, opts: any): any;

    getTimePeriodWithHttpInfo(time_period_gid: any, opts: any): any;

    getTimePeriods(workspace: any, opts: any): any;

    getTimePeriodsWithHttpInfo(workspace: any, opts: any): any;

}

export class TimeTrackingEntriesApi {
    constructor(apiClient: any);

    createTimeTrackingEntry(body: any, task_gid: any, opts: any): any;

    createTimeTrackingEntryWithHttpInfo(body: any, task_gid: any, opts: any): any;

    deleteTimeTrackingEntry(time_tracking_entry_gid: any): any;

    deleteTimeTrackingEntryWithHttpInfo(time_tracking_entry_gid: any): any;

    getTimeTrackingEntriesForTask(task_gid: any, opts: any): any;

    getTimeTrackingEntriesForTaskWithHttpInfo(task_gid: any, opts: any): any;

    getTimeTrackingEntry(time_tracking_entry_gid: any, opts: any): any;

    getTimeTrackingEntryWithHttpInfo(time_tracking_entry_gid: any, opts: any): any;

    updateTimeTrackingEntry(body: any, time_tracking_entry_gid: any, opts: any): any;

    updateTimeTrackingEntryWithHttpInfo(body: any, time_tracking_entry_gid: any, opts: any): any;

}

export class TypeaheadApi {
    constructor(apiClient: any);

    typeaheadForWorkspace(workspace_gid: any, resource_type: any, opts: any): any;

    typeaheadForWorkspaceWithHttpInfo(workspace_gid: any, resource_type: any, opts: any): any;

}

export class UserTaskListsApi {
    constructor(apiClient: any);

    getUserTaskList(user_task_list_gid: any, opts: any): any;

    getUserTaskListForUser(user_gid: any, workspace: any, opts: any): any;

    getUserTaskListForUserWithHttpInfo(user_gid: any, workspace: any, opts: any): any;

    getUserTaskListWithHttpInfo(user_task_list_gid: any, opts: any): any;

}

export class UsersApi {
    constructor(apiClient: any);

    getFavoritesForUser(user_gid: any, resource_type: any, workspace: any, opts: any): any;

    getFavoritesForUserWithHttpInfo(user_gid: any, resource_type: any, workspace: any, opts: any): any;

    getUser(user_gid: any, opts: any): any;

    getUserWithHttpInfo(user_gid: any, opts: any): any;

    getUsers(opts: any): any;

    getUsersForTeam(team_gid: any, opts: any): any;

    getUsersForTeamWithHttpInfo(team_gid: any, opts: any): any;

    getUsersForWorkspace(workspace_gid: any, opts: any): any;

    getUsersForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    getUsersWithHttpInfo(opts: any): any;

}

export class WebhooksApi {
    constructor(apiClient: any);

    createWebhook(body: any, opts: any): any;

    createWebhookWithHttpInfo(body: any, opts: any): any;

    deleteWebhook(webhook_gid: any): any;

    deleteWebhookWithHttpInfo(webhook_gid: any): any;

    getWebhook(webhook_gid: any, opts: any): any;

    getWebhookWithHttpInfo(webhook_gid: any, opts: any): any;

    getWebhooks(workspace: any, opts: any): any;

    getWebhooksWithHttpInfo(workspace: any, opts: any): any;

    updateWebhook(body: any, webhook_gid: any, opts: any): any;

    updateWebhookWithHttpInfo(body: any, webhook_gid: any, opts: any): any;

}

export class WorkspaceMembershipsApi {
    constructor(apiClient: any);

    getWorkspaceMembership(workspace_membership_gid: any, opts: any): any;

    getWorkspaceMembershipWithHttpInfo(workspace_membership_gid: any, opts: any): any;

    getWorkspaceMembershipsForUser(user_gid: any, opts: any): any;

    getWorkspaceMembershipsForUserWithHttpInfo(user_gid: any, opts: any): any;

    getWorkspaceMembershipsForWorkspace(workspace_gid: any, opts: any): any;

    getWorkspaceMembershipsForWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

}

export class WorkspacesApi {
    constructor(apiClient: any);

    addUserForWorkspace(body: any, workspace_gid: any, opts: any): any;

    addUserForWorkspaceWithHttpInfo(body: any, workspace_gid: any, opts: any): any;

    getWorkspace(workspace_gid: any, opts: any): any;

    getWorkspaceWithHttpInfo(workspace_gid: any, opts: any): any;

    getWorkspaces(opts: any): any;

    getWorkspacesWithHttpInfo(opts: any): any;

    removeUserForWorkspace(body: any, workspace_gid: any): any;

    removeUserForWorkspaceWithHttpInfo(body: any, workspace_gid: any): any;

    updateWorkspace(body: any, workspace_gid: any, opts: any): any;

    updateWorkspaceWithHttpInfo(body: any, workspace_gid: any, opts: any): any;

}

export namespace ApiClient {
    namespace instance {
        const RETURN_COLLECTION: boolean;

        const authentications: {
            token: {
                type: string;
            };
        };

        const basePath: string;

        const cache: boolean;

        const defaultHeaders: {
        };

        const enableCookies: boolean;

        const requestAgent: any;

        const timeout: number;

        function applyAuthToRequest(request: any, authNames: any): void;

        function buildCollectionParam(param: any, collectionFormat: any): any;

        function buildUrl(path: any, pathParams: any): any;

        function callApi(path: any, httpMethod: any, pathParams: any, queryParams: any, headerParams: any, formParams: any, bodyParam: any, authNames: any, contentTypes: any, accepts: any, returnType: any): any;

        function deserialize(response: any, returnType: any): any;

        function isFileParam(param: any): any;

        function isJsonMime(contentType: any): any;

        function jsonPreferredMime(contentTypes: any): any;

        function normalizeParams(params: any): any;

        function paramToString(param: any): any;

        namespace agent {
            function accept(...args: any[]): any;

            function acl(url: any, fn: any): any;

            function auth(...args: any[]): any;

            function bind(url: any, fn: any): any;

            function buffer(...args: any[]): any;

            function ca(...args: any[]): any;

            function cert(...args: any[]): any;

            function checkout(url: any, fn: any): any;

            function connect(url: any, fn: any): any;

            function copy(url: any, fn: any): any;

            function del(url: any, fn: any): any;

            function disableTLSCerts(...args: any[]): any;

            function get(url: any, fn: any): any;

            function head(url: any, fn: any): any;

            function key(...args: any[]): any;

            function link(url: any, fn: any): any;

            function lock(url: any, fn: any): any;

            function merge(url: any, fn: any): any;

            function mkactivity(url: any, fn: any): any;

            function mkcalendar(url: any, fn: any): any;

            function mkcol(url: any, fn: any): any;

            function move(url: any, fn: any): any;

            function notify(url: any, fn: any): any;

            function ok(...args: any[]): any;

            function on(...args: any[]): any;

            function once(...args: any[]): any;

            function options(url: any, fn: any): any;

            function parse(...args: any[]): any;

            function patch(url: any, fn: any): any;

            function pfx(...args: any[]): any;

            function post(url: any, fn: any): any;

            function propfind(url: any, fn: any): any;

            function proppatch(url: any, fn: any): any;

            function purge(url: any, fn: any): any;

            function put(url: any, fn: any): any;

            function query(...args: any[]): any;

            function rebind(url: any, fn: any): any;

            function redirects(...args: any[]): any;

            function report(url: any, fn: any): any;

            function retry(...args: any[]): any;

            function search(url: any, fn: any): any;

            function serialize(...args: any[]): any;

            function set(...args: any[]): any;

            function sortQuery(...args: any[]): any;

            function source(url: any, fn: any): any;

            function subscribe(url: any, fn: any): any;

            function timeout(...args: any[]): any;

            function trace(url: any, fn: any): any;

            function type(...args: any[]): any;

            function unbind(url: any, fn: any): any;

            function unlink(url: any, fn: any): any;

            function unlock(url: any, fn: any): any;

            function unsubscribe(url: any, fn: any): any;

            function use(...args: any[]): any;

            function withCredentials(...args: any[]): any;

            namespace jar {
                // Too-deep object hierarchy from asana.ApiClient.instance.agent.jar
                const getCookie: any;

                // Too-deep object hierarchy from asana.ApiClient.instance.agent.jar
                const getCookies: any;

                // Too-deep object hierarchy from asana.ApiClient.instance.agent.jar
                const setCookie: any;

                // Too-deep object hierarchy from asana.ApiClient.instance.agent.jar
                const setCookies: any;

            }

        }

    }

}
}
